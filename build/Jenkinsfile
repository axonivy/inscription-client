pipeline {
  agent any

  options {
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '5'))
  }

  triggers {
    cron '@midnight'
  }

  stages {
    stage('Client') {
      steps {
        script {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            docker.build('node', '-f build/Dockerfile .').inside {
              sh 'build/use-mirror-npm.sh'
              sh 'yarn ci'
            }
          }
          archiveArtifacts artifacts: '**/integrations/standalone/build/**', allowEmptyArchive: true
          withChecks('ESLint') {
            recordIssues enabledForFailure: true, publishAllIssues: true, aggregatingResults: true, tools: [esLint(pattern: 'packages/**/eslint.xml,integrations/**/eslint.xml')], qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]
          }
          withChecks('Test') {
            junit testDataPublishers: [[$class: 'StabilityTestDataPublisher']], testResults: 'packages/**/report.xml'
          }
        }
      }
    }
    stage('Mock Tests') {
      steps {
        script {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            docker.image('mcr.microsoft.com/playwright:v1.40.1-jammy').inside {
              sh 'yarn standalone webtest:mock'
            }
          }
          archiveArtifacts artifacts: '**/standalone/test-results/**', allowEmptyArchive: true
          withChecks('Mock WebTest') {
            junit testDataPublishers: [[$class: 'StabilityTestDataPublisher']], testResults: 'integrations/**/report.xml'
          }
        }
      }
    }

    stage('Publish next') {
      when {
        expression { isReleaseOrMasterBranch() && currentBuild.changeSets.size() > 0 }
      }
      steps {
        script {
          docker.build('node', '-f build/Dockerfile .').inside {
            sh 'git checkout yarn.lock'
            sh 'yarn build'
            withNPM(npmrcConfig:'npmjs-registry.ivyteam.io') {
              sh 'yarn publish:next'
            }
          }
        }
      }
    }
  }
}

def isReleaseOrMasterBranch() {
  return env.BRANCH_NAME == 'master' || env.BRANCH_NAME.startsWith('release/') 
}
