pipeline {
  agent any

  options {
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '5'))
    disableConcurrentBuilds()
  }

  triggers {
    cron '@midnight'
  }

  parameters {
    string(name: 'engineSource', defaultValue: 'https://product.ivyteam.io/', description: 'Engine page url')
    choice(name: 'browser', choices: ['', 'all', 'chrome', 'firefox', 'webkit'], description: 'Browser used for integration tests (default: "all" on master/release, "chrome" on branch)')
  }

  stages {
    stage('Integration Test') {
      environment {
        BROWSERS = browser()
      }
      steps {
        script {
          docker.build('node-webtest', '-f build/playwright/Dockerfile .').inside {
            sh 'build/use-mirror-npm.sh'
            sh 'yarn install'
            sh 'yarn package'
            dir ('integrations/standalone/tests/integration/project') {
              maven cmd: "-ntp verify -Dengine.page.url=${params.engineSource}"
            }
          }
          archiveArtifacts artifacts: 'integrations/standalone/test-results/**', allowEmptyArchive: true
          archiveArtifacts artifacts: 'integrations/standalone/**/target/**/ivy.log', allowEmptyArchive: true
          withChecks('Integration WebTest') {
            junit testDataPublishers: [[$class: 'StabilityTestDataPublisher']], testResults: 'integrations/**/report.xml'
          }
        }
      }
    }
    stage('Protocol') {
      when {
        expression { isReleaseOrMasterBranch() }
      }
      steps {
        script {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            docker.build('node', '-f build/Dockerfile .').inside {
              def branchName = env.BRANCH_NAME.replace("/", "%252F")
              sh '''
                build/use-mirror-npm.sh
                yarn
                yarn protocol clean

                artifacts="https://jenkins.ivyteam.io/job/core_json-schema/job/'''+branchName+'''/lastSuccessfulBuild/artifact"
                devSchema="${artifacts}/workspace/ch.ivyteam.ivy.inscription.lsp.schema/target/schema/process/*/inscription.json/*zip*/process.zip"
                curl -o process.zip ${devSchema}
                unzip -j process.zip
                yarn protocol generate $PWD/inscription.json

                yarn build && yarn lint:ci
              '''
            }
          }
          withChecks('Integration Protocol ESLint') {
            recordIssues enabledForFailure: true, publishAllIssues: true, aggregatingResults: true, tools: [esLint(id: 'latest', pattern: 'packages/**/eslint.xml,integrations/**/eslint.xml')], qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]
          }
        }
      }
    }
  }
}

def isReleaseOrMasterBranch() {
  return env.BRANCH_NAME == 'master' || env.BRANCH_NAME.startsWith('release/') 
}

def browser() {
  if (params.browser == '') {
    if (isReleaseOrMasterBranch()) {
      return 'all'
    }
    return 'chrome'
  }
  return params.browser;
}
